{"version":3,"sources":["Transform.ts","Element.ts","Circle.ts","Ellipse.ts","Path.ts","Rectangle.ts","StraightLine.ts","Text.ts","Group.ts","StyleSet.ts","Diagram.ts","FileManager.ts","Entry.ts"],"names":[],"mappings":"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","file":"index.min.js","sourceRoot":"../src/main","sourcesContent":["\nimport * as Types from \"./Types\";\n\nexport default class Transform {\n  private pieces: string[];\n\n  constructor() {\n    this.pieces = [];\n  }\n\n\n  public addRotate(angle: number, x?: number, y?: number): Transform {\n    this.pieces.push(`rotate(${angle} ${x || \"\"} ${y || \"\"})`);\n    return this;\n  }\n\n\n  public addScale(x: number, y?: number): Transform {\n    this.pieces.push(`scale(${x} ${y || \"\"})`);\n    return this;\n  }\n\n\n  public addSkewX(angle: number): Transform {\n    this.pieces.push(`skewX(${angle})`);\n    return this;\n  }\n\n\n  public addSkewY(angle: number): Transform {\n    this.pieces.push(`skewY(${angle})`);\n    return this;\n  }\n\n\n  public addTranslate(x: number, y?: number): Transform {\n    this.pieces.push(`translate(${x} ${y || \"\"})`);\n    return this;\n  }\n\n\n  public getMarkup(): string {\n    return this.pieces.join(\" \");\n  }\n\n}\n","\nimport StyleSet from \"./StyleSet\";\nimport Transform from \"./Transform\";\nimport * as Types from \"./Types\";\n\nexport default class Element {\n  private styleset: StyleSet;\n  private transform: Transform;\n  private x_pos: number;\n  private y_pos: number;\n\n  constructor(styleset: StyleSet, x_pos: number, y_pos: number) {\n    this.styleset = styleset;\n    this.x_pos = x_pos;\n    this.y_pos = y_pos;\n  }\n\n\n  public getExtremes(): Types.Extremes {\n    throw new Error(\"to be overridden\");\n  }\n\n\n  public getMarkup(): string {\n    throw new Error(\"to be overridden\");\n  }\n\n\n  public getStyleSet(): StyleSet {\n    return this.styleset;\n  }\n\n\n  public getTransform(): Transform {\n    if (!this.transform) {\n      this.transform = new Transform();\n    }\n    return this.transform;\n  }\n\n\n  public getTransformMarkup(): string {\n    if (!this.transform) {\n      return \"\";\n    }\n    return \" transform='\" + this.transform.getMarkup() + \"'\";\n  }\n\n\n  public getX(): number {\n    return this.x_pos;\n  }\n\n\n  public getY(): number {\n    return this.y_pos;\n  }\n\n\n  public setStyleSet(arg: StyleSet): void {\n    this.styleset = arg;\n  }\n\n\n  public setTransform(arg: Transform): void {\n    this.transform = arg;\n  }\n\n\n  public setX(arg: number): void {\n    this.x_pos = arg;\n  }\n\n\n  public setY(arg: number): void {\n    this.y_pos = arg;\n  }\n\n\n  public toString(): string {\n    return this.getMarkup();\n  }\n\n}\n","\nimport Element from \"./Element\";\nimport StyleSet from \"./StyleSet\";\nimport * as Types from \"./Types\";\n\nexport default class Circle extends Element {\n  private rad: number;\n\n  constructor(styleset: StyleSet, x_pos: number, y_pos: number, rad: number) {\n    super(styleset, x_pos, y_pos);\n    this.rad = rad;\n  }\n\n  public getExtremes(): Types.Extremes {\n    return {\n      x_min: this.getX() - this.rad,\n      y_min: this.getY() - this.rad,\n      x_max: this.getX() + this.rad,\n      y_max: this.getY() + this.rad,\n    };\n  }\n\n\n  public getMarkup(): string {\n    return \"<circle\"\n      + \" cx='\" + this.getX() + \"'\"\n      + \" cy='\" + this.getY() + \"'\"\n      + \" r='\"  + this.rad + \"'\"\n      + \" \" + this.getStyleSet().getStyleDefinition()\n      + this.getTransformMarkup()\n      + \" />\";\n  }\n\n\n  public getRadius(): number {\n    return this.rad;\n  }\n\n\n  public setRadius(arg: number): void {\n    this.rad = arg;\n  }\n\n}\n","\nimport Element from \"./Element\";\nimport StyleSet from \"./StyleSet\";\nimport * as Types from \"./Types\";\n\nexport default class Ellipse extends Element {\n  private x_rad: number;\n  private y_rad: number;\n\n  constructor(styleset: StyleSet, x_pos: number, y_pos: number, x_rad: number, y_rad: number) {\n    super(styleset, x_pos, y_pos);\n    this.x_rad = x_rad;\n    this.y_rad = y_rad;\n  }\n\n  public getExtremes(): Types.Extremes {\n    return {\n      x_min: this.getX() - this.x_rad,\n      y_min: this.getY() - this.y_rad,\n      x_max: this.getX() + this.x_rad,\n      y_max: this.getY() + this.y_rad,\n    };\n  }\n\n\n  public getMarkup(): string {\n    return \"<ellipse\"\n      + \" cx='\" + this.getX() + \"'\"\n      + \" cy='\" + this.getY() + \"'\"\n      + \" rx='\" + this.x_rad + \"'\"\n      + \" ry='\" + this.y_rad + \"'\"\n      + \" \" + this.getStyleSet().getStyleDefinition()\n      + this.getTransformMarkup()\n      + \" />\";\n  }\n\n\n  public getRadiusX(): number {\n    return this.x_rad;\n  }\n\n\n  public getRadiusY(): number {\n    return this.y_rad;\n  }\n\n\n  public setRadiusX(arg: number): void {\n    this.x_rad = arg;\n  }\n\n\n  public setRadiusY(arg: number): void {\n    this.y_rad = arg;\n  }\n\n}\n","\nimport Element from \"./Element\";\nimport StyleSet from \"./StyleSet\";\nimport * as Types from \"./Types\";\n\nexport default class Path extends Element {\n  private extremes: Types.Extremes;\n  private path_closed: boolean;\n  private pieces: string[];\n  private x_cur: number;\n  private y_cur: number;\n\n  constructor(styleset: StyleSet, x_pos: number, y_pos: number) {\n    super(styleset, x_pos, y_pos);\n    this.extremes = {\n      x_min: x_pos,\n      y_min: y_pos,\n      x_max: x_pos,\n      y_max: y_pos,\n    };\n    this.path_closed = false;\n    this.pieces = [];\n    this.x_cur = x_pos;\n    this.y_cur = y_pos;\n    this.moveToAbsolute(x_pos, y_pos);\n  }\n\n\n  private checkPathIsOpen(): void {\n    if (this.path_closed) {\n      throw new Error(\"path is closed, no more pieces can be added\");\n    }\n  }\n\n  public closePath(): Path {\n    this.pieces.push(\"Z\");\n    this.path_closed = true;\n    return this;\n  }\n\n\n  public cubicBezierAbsolute(x_cs: number, y_cs: number, x_ce: number, y_ce: number, x_end: number, y_end: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`C ${x_cs},${y_cs} ${x_ce},${y_ce} ${x_end},${y_end}`);\n    this.setNewCurrentPositionAbsolute(x_end, y_end);\n    return this;\n  }\n\n\n  public cubicBezierRelative(x_cs: number, y_cs: number, x_ce: number, y_ce: number, x_delta: number, y_delta: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`c ${x_cs},${y_cs} ${x_ce},${y_ce} ${x_delta},${y_delta}`);\n    this.setNewCurrentPositionRelative(x_delta, y_delta);\n    return this;\n  }\n\n\n  public cubicBezierSmoothAbsolute(x_ce: number, y_ce: number, x_end: number, y_end: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`S ${x_ce},${y_ce} ${x_end},${y_end}`);\n    this.setNewCurrentPositionAbsolute(x_end, y_end);\n    return this;\n  }\n\n\n  public cubicBezierSmoothRelative(x_ce: number, y_ce: number, x_delta: number, y_delta: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`s ${x_ce},${y_ce} ${x_delta},${y_delta}`);\n    this.setNewCurrentPositionRelative(x_delta, y_delta);\n    return this;\n  }\n\n\n  public ellipticArcAbsolute(x_rad: number, y_rad: number, angle: number, large_arc: boolean, anticlockwise: boolean, x_end: number, y_end: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`A ${x_rad},${y_rad} ${angle},${large_arc ? 1 : 0},${anticlockwise ? 1 : 0} ${x_end},${y_end}`);\n    this.setNewCurrentPositionAbsolute(x_end, y_end);\n    return this;\n  }\n\n\n  public ellipticArcRelative(x_rad: number, y_rad: number, angle: number, large_arc: boolean, anticlockwise: boolean, x_delta: number, y_delta: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`a ${x_rad},${y_rad} ${angle},${large_arc ? 1 : 0},${anticlockwise ? 1 : 0} ${x_delta},${y_delta}`);\n    this.setNewCurrentPositionRelative(x_delta, y_delta);\n    return this;\n  }\n\n\n  public getExtremes(): Types.Extremes {\n    return this.extremes;\n  }\n\n\n  public getMarkup(): string {\n    return \"<path\"\n      + \" d='\" + this.pieces.join(\" \") + \"'\"\n      + \" \" + this.getStyleSet().getStyleDefinition()\n      + this.getTransformMarkup()\n      + \" />\";\n  }\n\n\n  public lineToAbsolute(x_end: number, y_end: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`L ${x_end},${y_end}`);\n    this.setNewCurrentPositionAbsolute(x_end, y_end);\n    return this;\n  }\n\n\n  public lineToRelative(x_delta: number, y_delta: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`l ${x_delta},${y_delta}`);\n    this.setNewCurrentPositionRelative(x_delta, y_delta);\n    return this;\n  }\n\n\n  public moveToAbsolute(x_end: number, y_end: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`M ${x_end},${y_end}`);\n    this.setNewCurrentPositionAbsolute(x_end, y_end);\n    return this;\n  }\n\n\n  public moveToRelative(x_delta: number, y_delta: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`m ${x_delta},${y_delta}`);\n    this.setNewCurrentPositionRelative(x_delta, y_delta);\n    return this;\n  }\n\n\n  public quadraticBezierAbsolute(x_c: number, y_c: number, x_end: number, y_end: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`Q ${x_c},${y_c} ${x_end},${y_end}`);\n    this.setNewCurrentPositionAbsolute(x_end, y_end);\n    return this;\n  }\n\n\n  public quadraticBezierRelative(x_c: number, y_c: number, x_delta: number, y_delta: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`q ${x_c},${y_c} ${x_delta},${y_delta}`);\n    this.setNewCurrentPositionRelative(x_delta, y_delta);\n    return this;\n  }\n\n\n  public quadraticBezierSmoothAbsolute(x_end: number, y_end: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`T ${x_end},${y_end}`);\n    this.setNewCurrentPositionAbsolute(x_end, y_end);\n    return this;\n  }\n\n\n  public quadraticBezierSmoothRelative(x_delta: number, y_delta: number): Path {\n    this.checkPathIsOpen();\n    this.pieces.push(`t ${x_delta},${y_delta}`);\n    this.setNewCurrentPositionRelative(x_delta, y_delta);\n    return this;\n  }\n\n\n  private setNewCurrentPositionAbsolute(x_new: number, y_new: number): void {\n    this.x_cur = x_new;\n    this.y_cur = y_new;\n    if (x_new > this.extremes.x_max) {\n      this.extremes.x_max = x_new;\n    }\n    if (x_new < this.extremes.x_min) {\n      this.extremes.x_min = x_new;\n    }\n    if (y_new > this.extremes.y_max) {\n      this.extremes.y_max = y_new;\n    }\n    if (y_new < this.extremes.y_min) {\n      this.extremes.y_min = y_new;\n    }\n  }\n\n\n  private setNewCurrentPositionRelative(x_delta: number, y_delta: number): void {\n    this.setNewCurrentPositionAbsolute(this.x_cur + x_delta, this.y_cur + y_delta);\n  }\n\n}\n","\nimport Element from \"./Element\";\nimport StyleSet from \"./StyleSet\";\nimport * as Types from \"./Types\";\n\nexport default class Rectangle extends Element {\n  private height: number;\n  private width: number;\n\n  constructor(styleset: StyleSet, x_pos: number, y_pos: number, width: number, height: number) {\n    super(styleset, x_pos, y_pos);\n    this.height = height;\n    this.width  = width;\n  }\n\n  public getExtremes(): Types.Extremes {\n    return {\n      x_min: (this.getX() - (this.width  / 2)),\n      y_min: (this.getY() - (this.height / 2)),\n      x_max: (this.getX() + (this.width  / 2)),\n      y_max: (this.getY() + (this.height / 2)),\n    };\n  }\n\n\n  public getMarkup(): string {\n    return \"<rect\"\n     + \" x='\" + (this.getX() - (this.width  / 2)) + \"'\"\n     + \" y='\" + (this.getY() - (this.height / 2)) + \"'\"\n     + \" width='\"  + this.width  + \"'\"\n     + \" height='\" + this.height + \"'\"\n     + \" \" + this.getStyleSet().getStyleDefinition()\n     + this.getTransformMarkup()\n     + \" />\";\n  }\n\n\n  public getHeight(): number {\n    return this.height;\n  }\n\n\n  public getWidth(): number {\n    return this.width;\n  }\n\n\n  public setHeight(arg: number): void {\n    this.height = arg;\n  }\n\n\n  public setWidth(arg: number): void {\n    this.width = arg;\n  }\n\n}\n","\nimport Element from \"./Element\";\nimport StyleSet from \"./StyleSet\";\nimport * as Types from \"./Types\";\n\nexport default class StriaghtLine extends Element {\n  private x_to: number;\n  private y_to: number;\n\n  constructor(styleset: StyleSet, x_pos: number, y_pos: number, x_to: number, y_to: number) {\n    super(styleset, x_pos, y_pos);\n    this.x_to = x_to;\n    this.y_to = y_to;\n  }\n\n\n  public getExtremes(): Types.Extremes {\n    return {\n      x_min: Math.min(this.getX(), this.x_to),\n      y_min: Math.min(this.getY(), this.y_to),\n      x_max: Math.max(this.getX(), this.x_to),\n      y_max: Math.max(this.getY(), this.y_to),\n    };\n  }\n\n\n  public getMarkup(): string {\n    return \"<line\"\n     + \" x1='\" + this.getX() + \"'\"\n     + \" y1='\" + this.getY() + \"'\"\n     + \" x2='\" + this.x_to + \"'\"\n     + \" y2='\" + this.y_to + \"'\"\n     + \" \" + this.getStyleSet().getStyleDefinition()\n     + this.getTransformMarkup()\n     + \" />\";\n  }\n\n\n  public getXto(): number {\n    return this.x_to;\n  }\n\n\n  public getYto(): number {\n    return this.y_to;\n  }\n\n\n  public setXto(arg: number): void {\n    this.x_to = arg;\n  }\n\n\n  public setYto(arg: number): void {\n    this.y_to = arg;\n  }\n\n}\n","\nimport Element from \"./Element\";\nimport StyleSet from \"./StyleSet\";\nimport * as Types from \"./Types\";\n\nexport default class Text extends Element {\n  private text: string;\n\n  constructor(styleset: StyleSet, x_pos: number, y_pos: number, text: string) {\n    super(styleset, x_pos, y_pos);\n    this.text = text;\n  }\n\n\n  public static chopTextToFitWidth(text: string, font_size: number, width: number, word_wrap?: boolean): string[] {\n    let out: string[] = [ \"\" ];\n    let curr_length: number = 0;\n    let prev_split_posn: number = 0;\n    let last_space_posn: number = 0;\n    if (!Number.isFinite(width / font_size) || (width / font_size) < 5) {\n      throw new Error(`width (${width}) / font size (${font_size}) must be >= 5`);\n    }\n    const wordWrapIfRequired = () => {\n      if (word_wrap && (last_space_posn > prev_split_posn)) {\n        const split_index: number = last_space_posn - prev_split_posn;\n        out[out.length - 2] = out[out.length - 2].substr(0, split_index);\n        i = last_space_posn + 1;\n      }\n    }\n    let i: number = 0;\n    while (i < text.length) {\n      const code = text.charCodeAt(i);\n      const new_length: number = latin_glyph_widths[String(code)] || 5;\n      if (curr_length + new_length > (width * 10 / font_size)) {\n        out.push(\"\");\n        curr_length = 0;\n        wordWrapIfRequired();\n        prev_split_posn = i;\n      }\n      if (code === 32) {\n        last_space_posn = i;\n      }\n      out[out.length - 1] += text.substr(i, 1);\n      curr_length += new_length;\n      i += 1\n    }\n    // wordWrapIfRequired();\n    return out;\n  }\n\n\n  private estimateHeight(): number {\n    return 20; // line height?\n  }\n\n\n  public static estimateTextWidth(text: string, font_size: number): number {\n    let out: number = 0;\n    for (let i: number = 0; i < text.length; i += 1) {\n      const code = text.charCodeAt(i);\n      out += latin_glyph_widths[String(code)] || 0;\n    }\n    return Math.ceil(out * font_size / 10);\n  }\n\n\n  public estimateWidth(): number {\n    return Text.estimateTextWidth(this.text, this.getStyleSet().getFontSize());\n  }\n\n\n  public getExtremes(): Types.Extremes {\n    const height: number = this.estimateHeight();\n    const width : number = this.estimateWidth();\n    return {\n      x_min: (this.getX() - (width  / 2)),\n      y_min: (this.getY() - (height / 2)),\n      x_max: (this.getX() + (width  / 2)),\n      y_max: (this.getY() + (height / 2)),\n    };\n  }\n\n\n  public getMarkup(): string {\n    return \"<text\"\n     + \" x='\" + (this.getX() - (this.estimateWidth()  / 2)) + \"'\"\n     + \" y='\" + (this.getY() - (this.estimateHeight()    )) + \"'\"\n     + \" \" + this.getStyleSet().getStyleDefinition()\n     + this.getTransformMarkup()\n     + \" >\" + this.text + \"</text>\";\n  }\n\n\n  public getText(): string {\n    return this.text;\n  }\n\n\n  public setText(arg: string): void {\n    this.text = arg;\n  }\n\n}\n\n\nconst latin_glyph_widths = {\n   \"65\": 7.2, // A\n   \"66\": 6.6,\n   \"67\": 6.6,\n   \"68\": 7.2, // D\n   \"69\": 6.1,\n   \"70\": 5.6,\n   \"71\": 7.1, // G\n   \"72\": 7.1,\n   \"73\": 3.3,\n   \"74\": 3.8, // J\n   \"75\": 7.1,\n   \"76\": 6.1,\n   \"77\": 8.8, // M\n   \"78\": 7.1,\n   \"79\": 7.1,\n   \"80\": 5.6, // P\n   \"81\": 7.2,\n   \"82\": 6.6,\n   \"83\": 5.6, // S\n   \"84\": 6.2,\n   \"85\": 7.1,\n   \"86\": 7.1, // V\n   \"87\": 9.4,\n   \"88\": 7.2,\n   \"89\": 7.2,\n   \"90\": 6.2,\n   \"97\": 4.5, // a\n   \"98\": 5.0,\n   \"99\": 4.4,\n  \"100\": 5.0, // d\n  \"101\": 4.4,\n  \"102\": 3.2,\n  \"103\": 5.0, // g\n  \"104\": 5.0,\n  \"105\": 2.8,\n  \"106\": 2.7, // j\n  \"107\": 5.0,\n  \"108\": 2.8,\n  \"109\": 7.8, // m\n  \"110\": 5.0,\n  \"111\": 5.0,\n  \"112\": 5.0, // p\n  \"113\": 5.0,\n  \"114\": 3.4,\n  \"115\": 3.8, // s\n  \"116\": 2.8,\n  \"117\": 5.0,\n  \"118\": 5.0, // v\n  \"119\": 7.2,\n  \"120\": 5.0,\n  \"121\": 5.0, // y\n  \"122\": 4.4,\n};\n","\nimport Circle from \"./Circle\";\nimport Element from \"./Element\";\nimport Ellipse from \"./Ellipse\";\nimport Path from \"./Path\";\nimport Rectangle from \"./Rectangle\";\nimport StraightLine from \"./StraightLine\";\nimport StyleSet from \"./StyleSet\";\nimport Text from \"./Text\";\nimport * as Types from \"./Types\";\n\n\nexport default class Group extends Element {\n  private current_styleset: StyleSet;\n  private elements: Element[];\n  private positioned: boolean;\n\n  constructor(current_styleset: StyleSet, x_pos?: number, y_pos?: number) {\n    super(current_styleset, x_pos || 0, y_pos || 0);\n    this.positioned = (typeof x_pos === \"number\");\n    this.current_styleset = current_styleset;\n    this.elements = [];\n  }\n\n\n  public addCircle(x_pos: number, y_pos: number, rad: number): Circle {\n    const element = new Circle(this.current_styleset, x_pos, y_pos, rad);\n    this.elements.push(element);\n    return element;\n  }\n\n\n  public addEllipse(x_pos: number, y_pos: number, x_rad: number, y_rad: number): Ellipse {\n    const element = new Ellipse(this.current_styleset, x_pos, y_pos, x_rad, y_rad);\n    this.elements.push(element);\n    return element;\n  }\n\n\n  public addGroup(current_styleset?: StyleSet, x_pos?: number, y_pos?: number): Group {\n    const group = new Group(current_styleset || this.current_styleset, x_pos, y_pos);\n    this.elements.push(group);\n    return group;\n  }\n\n\n  public addPath(x_pos: number, y_pos: number): Path {\n    const element = new Path(this.current_styleset, x_pos, y_pos);\n    this.elements.push(element);\n    return element;\n  }\n\n\n  public addRectangle(x_pos: number, y_pos: number, width: number, height: number): Rectangle {\n    const element = new Rectangle(this.current_styleset, x_pos, y_pos, width, height);\n    this.elements.push(element);\n    return element;\n  }\n\n\n  public addStraightLine(x_from: number, y_from: number, x_to: number, y_to: number): StraightLine {\n    const element = new StraightLine(this.current_styleset, x_from, y_from, x_to, y_to);\n    this.elements.push(element);\n    return element;\n  }\n\n\n  public addText(x_pos: number, y_pos: number, text: string): Text {\n    const element = new Text(this.current_styleset, x_pos, y_pos, text);\n    this.elements.push(element);\n    return element;\n  }\n\n\n  public getExtremes(): Types.Extremes {\n    const extremes: Types.Extremes = {\n      x_min: Number.POSITIVE_INFINITY,\n      y_min: Number.POSITIVE_INFINITY,\n      x_max: Number.NEGATIVE_INFINITY,\n      y_max: Number.NEGATIVE_INFINITY,\n    };\n    this.elements.forEach((element: Element) => {\n      const elem_extr: Types.Extremes = element.getExtremes();\n      extremes.x_min = Math.min(extremes.x_min, elem_extr.x_min + this.getX());\n      extremes.y_min = Math.min(extremes.y_min, elem_extr.y_min + this.getY());\n      extremes.x_max = Math.max(extremes.x_max, elem_extr.x_max + this.getX());\n      extremes.y_max = Math.max(extremes.y_max, elem_extr.y_max + this.getY());\n      // console.log(`checking extremes given elem: ${JSON.stringify(elem_extr)} to give: ${JSON.stringify(extremes)}`);\n    });\n    return extremes;\n  }\n\n\n  public getMarkup(): string {\n    if (this.positioned) {\n      return \"\\n<svg x='\" + this.getX() + \"' y='\" + this.getY() + \"'>\\n\" + this.elements.map((element: Element) => element.getMarkup()).join(\"\\n\") + \"\\n</svg>\";\n    }\n    return \"\\n<g>\\n\" + this.elements.map((element: Element) => element.getMarkup()).join(\"\\n\") + \"\\n</g>\";\n  }\n\n\n  public getNewElementStyleSet(): StyleSet {\n    return this.current_styleset;\n  }\n\n\n  public setNewElementStyleSet(arg: StyleSet): void {\n    this.current_styleset = arg;\n  }\n\n}\n","\ntype AttributeName = \"fill\" | \"fill-opacity\" | \"font-size\" | \"stroke\" | \"stroke-width\";\ntype AttributeSet = { [A in AttributeName]: ValidationName };\ntype ValidationName = \"colour\" | \"length\" | \"percentage\";\ntype ValidationSet = { [valid_set: string]: RegExp[] };\n\nconst attr_set: AttributeSet = {\n  \"fill\"        : \"colour\",\n  \"fill-opacity\": \"percentage\",\n  \"font-size\"   : \"length\",\n  \"stroke\"      : \"colour\",\n  \"stroke-width\": \"length\",\n};\n\nconst val_set: ValidationSet = {\n  \"colour\": [ /^#[\\da-fA-F]{3}$/, /^#[\\da-fA-F]{6}$/, /rgb\\(\\d{1,2},\\d{1,2},\\d{1,2}\\)$/, /^none$/ ],\n  \"length\": [ /^\\d+px$/ ],\n  \"percentage\": [ /^\\d+(\\.\\d+)?%$/ ],\n};\n\n\nexport default class StyleSet {\n  private attributes: { [A in AttributeName]?: string };\n\n  constructor(initial_attributes?: { [A in AttributeName]?: string }) {\n    this.attributes = initial_attributes || {};\n  }\n\n\n  public getAttribute(attr_name: AttributeName): string {\n    return this.attributes[attr_name];\n  }\n\n\n  public getFontSize(): number {\n    return parseInt(this.getAttribute(\"font-size\"), 10);\n  }\n\n\n  public static getInitialStyleSet(): StyleSet {\n    return new StyleSet({\n      \"stroke\"      : \"#000000\",\n      \"stroke-width\": \"1px\",\n      \"fill\"        : \"#808080\",\n      \"font-size\"   : \"16px\",\n    });\n  }\n\n\n  public getLineHeight(): number {\n    return parseInt(this.getAttribute(\"font-size\"), 10);\n  }\n\n\n  public getStyleDefinition(unquoted?: boolean): string {\n    const quote_char: string = unquoted ? \"\" : \"'\";\n    return Object.keys(this.attributes)\n      .map((attr_name: string) => `${attr_name}=${quote_char}${this.attributes[attr_name]}${quote_char}`)\n      .join(\" \");\n  }\n\n\n  public setAttribute(attr_name: AttributeName, value: string): void {\n    this.validateAttribute(attr_name, value);\n    this.attributes[attr_name] = value;\n  }\n\n\n  public validateAs(val_type: ValidationName, value: string): boolean {\n    let out: boolean = false;\n    const regexes: RegExp[] = val_set[val_type];\n    if (!regexes) {\n      throw new Error(`unrecognized validation type: ${val_type}`);\n    }\n    for (let i: number = 0; i < regexes.length && !out; i += 1) {\n      out = !!regexes[i].exec(value);\n    }\n    return out;\n  }\n\n\n  public validateAttribute(attr_name: AttributeName, value: string): void {\n    const val_type: ValidationName = attr_set[attr_name];\n    if (!val_type) {\n      throw new Error(`unrecognized style attribute name: ${attr_name}`);\n    }\n    if (!this.validateAs(val_type, value)) {\n      throw new Error(`value '${value}' of style attribute: ${attr_name} is not a valid ${val_type}`);\n    }\n  }\n\n\n}\n","\nimport Group from \"./Group\";\nimport StyleSet from \"./StyleSet\";\nimport * as Types from \"./Types\";\n\nexport default class Diagram {\n  public main: Group;\n  private title: string;\n\n  constructor(title?: string) {\n    this.main = new Group(StyleSet.getInitialStyleSet());\n    this.title = title || \"<untitled>\";\n  }\n\n\n  public getMarkup(): string {\n    const extremes: Types.Extremes = this.main.getExtremes();\n    return \"<svg\"\n     + \" width='\"  + (extremes.x_max /*- extremes.x_min*/ + 10) + \"'\"\n     + \" height='\" + (extremes.y_max /*- extremes.y_min*/ + 10) + \"'\"\n     + \" version='1.1'\"\n     + \" xmlns='http://www.w3.org/2000/svg'>\"\n     + this.main.getMarkup()\n     + \"</svg>\";\n  }\n\n\n  public getTitle(): string {\n    return this.title;\n  }\n\n\n  public setTitle(arg: string): void {\n    this.title = arg;\n  }\n\n}\n","\nimport * as Fs from \"fs\";\nimport Diagram from \"./Diagram\";\n\n\nconst head1 = '<!DOCTYPE html>'\n+ '<html lang=\"en\">'\n+   '<head>'\n+     '<title>';\nconst head2 = '</title>'\n+     '<meta charset=\"utf-8\">'\n+     '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />'\n+     '<meta name=\"author\" content=\"Stephen Francis\">'\n+     '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />'\n+     '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />'\n+     '<link rel=\"stylesheet\" href=\"../public/svg.css\" />'\n+   '</head>'\n+   '<body>'\n+     '<h1>';\nconst head3 = '</h1>';\nconst foot = \"</body></html>\";\n\n\nexport default class FileManager {\n  private path: string;\n  private encoding: string;\n\n  constructor(path?: string, encoding?: string) {\n    this.path = path || \"\";\n    this.encoding = encoding || \"utf8\";\n  }\n\n\n  public saveAsHTML(d: Diagram, filename: string): void {\n    const title: string = d.getTitle();\n    Fs.writeFileSync(\n      this.path + filename + \".html\",\n      head1 + title + head2 + title + head3 + d.getMarkup() + foot,\n      {\n        encoding: this.encoding,\n      }\n    );\n  }\n\n\n  public saveAsSVG(d: Diagram, filename: string): void {\n    Fs.writeFileSync(\n      this.path + filename + \".svg\",\n      d.getMarkup(),\n      {\n        encoding: this.encoding,\n      }\n    );\n  }\n\n}\n","\nexport { default as Diagram } from \"./Diagram\";\nexport { default as FileManager } from \"./FileManager\";\nexport { default as Group } from \"./Group\";\nexport { default as StyleSet } from \"./StyleSet\";\n"]}